"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const crypto = require("crypto");

const fs = require("fs-extra");
/**
 * 检查本地下载好的文件的尺寸和hash
 * 文件超过正确尺寸或尺寸正确但hash不对时会删除文件
 * 尺寸不正确或hash不正确会抛出异常
 * @param {String} file 文件路径
 * @param {any} size 正确的文件大小
 * @param {any} hashCode 正确的hash值
 * @returns {Promise<String>} 文件路径
 */


function check(_x, _x2, _x3) {
  return _check.apply(this, arguments);
}

function _check() {
  _check = (0, _asyncToGenerator2.default)(function* (file, size, hashCode) {
    const stats = yield fs.stat(file);

    if (stats.size < size) {
      throw new Error("unfinished");
    } else if (stats.size > size) {
      yield unlink(file);
      throw new Error("size");
    } else {
      console.log("check hash of " + file);
      const hash = yield getFileHash(file);

      if (hashCode === hash) {
        return file;
      } else {
        yield unlink(file);
        throw new Error("hash");
      }
    }
  });
  return _check.apply(this, arguments);
}

function getFileHash(_x4) {
  return _getFileHash.apply(this, arguments);
}

function _getFileHash() {
  _getFileHash = (0, _asyncToGenerator2.default)(function* (file) {
    const hash = crypto.createHash("sha256");
    const input = fs.createReadStream(file);
    return new Promise((resolve, reject) => {
      input.on("readable", () => {
        const data = input.read();

        if (data) {
          hash.update(data);
        } else {
          resolve(hash.digest("hex"));
        }
      }).once("error", reject);
    });
  });
  return _getFileHash.apply(this, arguments);
}

function unlink(file) {
  return fs.unlink(file).catch(() => {});
}

module.exports = check;