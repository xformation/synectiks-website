"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const os = require("os");

const path = require("path");

const checkDownload = require("./check-download");

const getAsset = require("./get-asset");

const spawn = require("./spawn");

const inGFW = require("in-gfw");

let nugget;

function tmpPath(_x) {
  return _tmpPath.apply(this, arguments);
}
/**
 * 下载 Git for windows
 *
 * @param {String} version 要下载的版本号，可以为大版本，不指定具体小版本
 * @returns {Promise<String>} 下载好的文件的文件路径
 */


function _tmpPath() {
  _tmpPath = (0, _asyncToGenerator2.default)(function* (fileName) {
    let tmpdir;

    if (process.platform !== "win32") {
      const stdout = yield spawn("cmd.exe", ["/d", "/s", "/c", "SET"], {
        stdio: "pipe"
      });
      tmpdir = /^TE?MP=(.*)$/igm.exec(stdout)[1];
      tmpdir = yield spawn("wslpath", [tmpdir], {
        stdio: "pipe"
      }).catch(() => tmpdir);
      tmpdir = tmpdir.trim();
    } else {
      tmpdir = os.tmpdir();
    }

    return path.join(tmpdir, fileName);
  });
  return _tmpPath.apply(this, arguments);
}

function download(_x2) {
  return _download.apply(this, arguments);
}

function _download() {
  _download = (0, _asyncToGenerator2.default)(function* (version) {
    const asset = yield getAsset(version);
    let url = asset.browser_download_url;
    let mirror = process.env.GIT4WIN_MIRROR || process.env.npm_config_git4win_mirror || (yield inGFW.net("github.com", "npm.taobao.org")) && "https://npm.taobao.org/mirrors/git-for-windows/";

    if (mirror) {
      mirror = mirror.replace(/\/*$/, "/");
      url = url.replace(/^.+?\/download\//, mirror);
    }

    const dist = yield tmpPath(asset.name);
    yield down(url, dist, asset);
    return dist;
  });
  return _download.apply(this, arguments);
}

function down(_x3, _x4, _x5) {
  return _down.apply(this, arguments);
}

function _down() {
  _down = (0, _asyncToGenerator2.default)(function* (url, dist, asset) {
    try {
      yield checkDownload(dist, asset.size, asset.hash);
      return dist;
    } catch (ex) {//
    }

    console.log("Download from:", url);

    try {
      yield spawn("curl", [process.env.CI && "--silent", "--fail", "--insecure", "--location", "--remote-time", "--continue-at", "-", "--output", dist, url].filter(Boolean), {
        argv0: "curl",
        env: Object.assign({
          https_proxy: process.env.npm_config_https_proxy
        }, process.env)
      });
    } catch (ex) {
      if ((ex.errno || ex.code) === "ENOENT") {
        if (!nugget) {
          nugget = fromCallback(require("nugget"));
        }

        yield nugget(url, {
          target: dist,
          quiet: process.env.CI,
          resume: true,
          strictSSL: false
        });
      } else {
        throw ex;
      }
    }

    return down(url, dist, asset);
  });
  return _down.apply(this, arguments);
}

function fromCallback(fn) {
  return function () {
    return new Promise((resolve, reject) => {
      arguments[arguments.length] = (err, res) => {
        if (err) {
          reject(err);
        } else {
          resolve(res);
        }
      };

      arguments.length++;
      fn.apply(this, arguments);
    });
  };
}

module.exports = download;