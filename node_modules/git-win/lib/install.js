"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const download = require("./download");

const gitPath = require("./git-path");

const spawn = require("./spawn");

const path = require("path");

const os = require("os");

const fs = require("fs-extra");

function getGitInstallVersion(_x) {
  return _getGitInstallVersion.apply(this, arguments);
}

function _getGitInstallVersion() {
  _getGitInstallVersion = (0, _asyncToGenerator2.default)(function* (gitInstallPath) {
    const git = gitPath.findFile(gitInstallPath, "cmd/git.exe");

    if (!git) {
      return;
    }

    const stdout = yield spawn(git, ["--version"], {
      stdio: "pipe"
    }).catch(() => "");

    if (stdout && /^(?:\w+\s+)+?(\d+\..+?)$/im.test(stdout)) {
      return RegExp.$1;
    }
  });
  return _getGitInstallVersion.apply(this, arguments);
}

function installGit(_x2) {
  return _installGit.apply(this, arguments);
}

function _installGit() {
  _installGit = (0, _asyncToGenerator2.default)(function* (version) {
    /* istanbul ignore if */
    if (process.platform !== "win32" && !/\bMicrosoft\b/i.test(os.release())) {
      console.error("`git-win` not support this platform, please install from Windows.");
      process.exit(1);
    }

    const gitInstallPath = gitPath.getGitDir();
    const gitInstallVersion = gitInstallPath && (yield getGitInstallVersion(gitInstallPath));

    if (gitInstallPath && (version ? gitInstallVersion.startsWith(version) : gitInstallVersion)) {
      return gitInstallPath;
    }

    const setuppack = yield download(version);
    const args = ["/VERYSILENT", "/NORESTART", "/NOCANCEL", "/SP-", "/CLOSEAPPLICATIONS", "/RESTARTAPPLICATIONS"];
    const remain = process.env.npm_config_argv && JSON.parse(process.env.npm_config_argv).remain;

    if (remain && remain.length) {
      args.push(...remain);
    }

    yield fs.chmod(setuppack, 0o755);
    console.log(`${setuppack} ${args.join(" ")}\nWaiting for git installation to complete.`);
    yield spawn(setuppack, args, {
      stdio: "inherit",
      detached: true
    });
    console.log("Installation complete.");
    yield autocrlf().catch(console.error);
    return installGit(version);
  });
  return _installGit.apply(this, arguments);
}

function autocrlf() {
  return _autocrlf.apply(this, arguments);
}

function _autocrlf() {
  _autocrlf = (0, _asyncToGenerator2.default)(function* () {
    if (!process.env.ProgramData) {
      return;
    }

    const file = path.join(process.env.ProgramData, "Git/config");
    let contents = yield fs.readFile(file, "utf-8");
    let changed;
    contents = contents.replace(/(\bautocrlf\s+=\s*)(\S+)/, (s, prefix, value) => {
      if (/^true$/i.test(value)) {
        s = prefix + "input";
        changed = true;
      }

      return s;
    });

    if (changed) {
      yield fs.writeFile(file, contents);
    }
  });
  return _autocrlf.apply(this, arguments);
}

module.exports = installGit;

if (process.mainModule === module) {
  fs.unlink("nul", () => {});
  installGit(process.env.npm_config_git_version).catch(error => {
    console.error(error);
    process.exitCode = 1;
  });
}