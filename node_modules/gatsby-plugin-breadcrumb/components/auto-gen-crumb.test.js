"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _Breadcrumb = _interopRequireDefault(require("./Breadcrumb"));

var _optionsContext = require("./options-context");

var _breadcrumbContext = require("./breadcrumb-context");

var props = {
  breadcrumb: {
    crumbs: [{
      crumbLabel: 'Home',
      pathname: '/'
    }, {
      crumbLabel: 'long',
      pathname: '/long'
    }, {
      crumbLabel: 'test',
      pathname: '/long/test'
    }],
    location: '/long/test'
  },
  crumbLabel: 'testLabel',
  crumbSeparator: ' - '
};
var useAutoGen = true;
var useClassNames = false;
var usePathPrefix = null;
afterEach(_react2.cleanup);
describe('Breadcrumb Click Tracking', function () {
  it('Should Render autogen breadcrumb', function () {
    var _render = (0, _react2.render)(_react.default.createElement(_optionsContext.OptionsProvider, {
      useAutoGen: useAutoGen,
      useClassNames: useClassNames,
      usePathPrefix: usePathPrefix
    }, _react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
      defaultCrumb: null
    }, _react.default.createElement(_Breadcrumb.default, {
      title: props.title,
      crumbs: props.breadcrumb.crumbs,
      crumbLabel: props.crumbLabel,
      crumbSeparator: props.crumbSeparator
    })))),
        getByText = _render.getByText;

    expect(getByText('Home')).toBeTruthy();
    expect(getByText('long')).toBeTruthy();
    expect(getByText('testLabel')).toBeTruthy();
  });
  it('Should render autogen breadcrumb, with disabled long crumb', function () {
    var _render2 = (0, _react2.render)(_react.default.createElement(_optionsContext.OptionsProvider, {
      useAutoGen: useAutoGen,
      useClassNames: useClassNames,
      usePathPrefix: usePathPrefix
    }, _react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
      defaultCrumb: null
    }, _react.default.createElement(_Breadcrumb.default, {
      title: props.title,
      crumbs: props.breadcrumb.crumbs,
      crumbLabel: props.crumbLabel,
      crumbSeparator: props.crumbSeparator,
      disableLinks: ['/long']
    })))),
        container = _render2.container,
        getByText = _render2.getByText;

    expect(getByText('Home')).toBeTruthy();
    expect(getByText('long')).toBeTruthy();
    expect(getByText('testLabel')).toBeTruthy();
    expect(container.querySelectorAll('a')).toHaveLength(2);
  });
  it('Should render autogen breadcrumb, with long crumb hidden', function () {
    var _render3 = (0, _react2.render)(_react.default.createElement(_optionsContext.OptionsProvider, {
      useAutoGen: useAutoGen,
      useClassNames: useClassNames,
      usePathPrefix: usePathPrefix
    }, _react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
      defaultCrumb: null
    }, _react.default.createElement(_Breadcrumb.default, {
      title: props.title,
      crumbs: props.breadcrumb.crumbs,
      crumbLabel: props.crumbLabel,
      crumbSeparator: props.crumbSeparator,
      hiddenCrumbs: ['/long']
    })))),
        container = _render3.container,
        getByText = _render3.getByText,
        queryByText = _render3.queryByText;

    expect(getByText('Home')).toBeTruthy();
    expect(queryByText('long')).toBeNull();
    expect(getByText('testLabel')).toBeTruthy();
    expect(container.querySelectorAll('a')).toHaveLength(2);
  });
  it('Should Render autogen breadcrumb using class names', function () {
    var _render4 = (0, _react2.render)(_react.default.createElement(_optionsContext.OptionsProvider, {
      useAutoGen: useAutoGen
      /* eslint-disable react/jsx-boolean-value */
      ,
      useClassNames: true,
      usePathPrefix: usePathPrefix
    }, _react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
      defaultCrumb: null
    }, _react.default.createElement(_Breadcrumb.default, {
      title: props.title,
      crumbs: props.breadcrumb.crumbs,
      crumbLabel: props.crumbLabel,
      crumbSeparator: props.crumbSeparator
    })))),
        container = _render4.container,
        getByText = _render4.getByText;

    expect(getByText('Home')).toBeTruthy();
    expect(getByText('long')).toBeTruthy();
    expect(getByText('testLabel')).toBeTruthy();
    container.querySelectorAll('a').forEach(function (a) {
      return expect(a.getAttribute('style')).toBeNull();
    });
  });
});