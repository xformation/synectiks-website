"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

require("@testing-library/jest-dom/extend-expect");

var _Breadcrumb = _interopRequireDefault(require("./Breadcrumb"));

var _optionsContext = require("./options-context");

var _breadcrumbContext = require("./breadcrumb-context");

var props = {
  title: 'testTitle',
  location: {
    href: 'http://localhost:8000/page-3/',
    origin: 'http://localhost:8000',
    protocol: 'http:',
    host: 'localhost:8000',
    hostname: 'localhost',
    port: '8000',
    pathname: '/page-3/',
    search: '',
    hash: '',
    state: null,
    key: 'initial'
  },
  crumbLabel: 'testLabel',
  crumbSeparator: ' - '
};
var defaultCrumb = {
  location: {
    pathname: '/'
  },
  crumbLabel: 'HomeCustom',
  crumbSeparator: ' / ',
  crumbStyle: {
    color: '#666'
  },
  crumbActiveStyle: {
    color: 'orange'
  }
};
var useAutoGen = false;
var useClassNames = false;
var usePathPrefix = null;
afterEach(_react2.cleanup);
describe('Breadcrumb Click Tracking', function () {
  it('Should render click tracking breadcrumb with default crumb', function () {
    var _render = (0, _react2.render)(_react.default.createElement(_optionsContext.OptionsProvider, {
      useAutoGen: useAutoGen,
      useClassNames: useClassNames,
      usePathPrefix: usePathPrefix
    }, _react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
      defaultCrumb: defaultCrumb
    }, _react.default.createElement(_Breadcrumb.default, {
      title: props.title,
      location: props.location,
      crumbLabel: props.crumbLabel,
      crumbSeparator: props.crumbSeparator
    })))),
        getByText = _render.getByText;

    expect(getByText('HomeCustom')).toBeTruthy();
    expect(getByText('testLabel')).toBeTruthy();
  });
  it('Should Render click tracking breadcrumb without default crumb', function () {
    var _render2 = (0, _react2.render)(_react.default.createElement(_optionsContext.OptionsProvider, {
      useAutoGen: useAutoGen,
      useClassNames: useClassNames,
      usePathPrefix: usePathPrefix
    }, _react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
      defaultCrumb: null
    }, _react.default.createElement(_Breadcrumb.default, {
      title: props.title,
      location: props.location,
      crumbLabel: props.crumbLabel,
      crumbSeparator: props.crumbSeparator
    })))),
        getByText = _render2.getByText,
        queryByText = _render2.queryByText;

    expect(queryByText('HomeCustom')).toBeNull();
    expect(getByText('testLabel')).toBeTruthy();
  });
  it('Should render click tracking breadcrumb with default crumb and path prefix', function () {
    var _render3 = (0, _react2.render)(_react.default.createElement(_optionsContext.OptionsProvider, {
      useAutoGen: useAutoGen,
      useClassNames: useClassNames,
      usePathPrefix: "/blog"
    }, _react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
      defaultCrumb: defaultCrumb
    }, _react.default.createElement(_Breadcrumb.default, {
      title: props.title,
      location: props.location,
      crumbLabel: props.crumbLabel,
      crumbSeparator: props.crumbSeparator
    })))),
        getByText = _render3.getByText;

    expect(getByText('HomeCustom')).toBeTruthy();
    expect(getByText('testLabel')).toBeTruthy();
  });
  it('Should render click tracking breadcrumb with default crumb and using class names', function () {
    var _render4 = (0, _react2.render)(_react.default.createElement(_optionsContext.OptionsProvider, {
      useAutoGen: useAutoGen
      /* eslint-disable react/jsx-boolean-value */
      ,
      useClassNames: true,
      usePathPrefix: usePathPrefix
    }, _react.default.createElement(_breadcrumbContext.BreadcrumbProvider, {
      defaultCrumb: defaultCrumb
    }, _react.default.createElement(_Breadcrumb.default, {
      title: props.title,
      location: props.location,
      crumbLabel: props.crumbLabel,
      crumbSeparator: props.crumbSeparator
    })))),
        container = _render4.container,
        getByText = _render4.getByText;

    expect(getByText('HomeCustom')).toBeTruthy();
    expect(getByText('testLabel')).toBeTruthy();
    container.querySelectorAll('a').forEach(function (a) {
      return expect(a.getAttribute('a')).toBeNull();
    });
  });
});