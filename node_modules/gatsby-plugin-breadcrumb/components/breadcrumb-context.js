"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.BreadcrumbConsumer = exports.BreadcrumbProvider = exports.BreadcrumbContext = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

/* eslint-disable import/no-extraneous-dependencies */
var BreadcrumbContext = _react.default.createContext('Breadcrumb');

exports.BreadcrumbContext = BreadcrumbContext;

var BreadcrumbProvider = function BreadcrumbProvider(_ref) {
  var children = _ref.children,
      _ref$defaultCrumb = _ref.defaultCrumb,
      defaultCrumb = _ref$defaultCrumb === void 0 ? null : _ref$defaultCrumb;

  var _React$useState = _react.default.useState(defaultCrumb ? [(0, _extends2.default)({}, defaultCrumb)] : []),
      crumbs = _React$useState[0],
      setCrumbs = _React$useState[1];

  var updateCrumbs = function updateCrumbs(_ref2) {
    var location = _ref2.location,
        crumbLabel = _ref2.crumbLabel,
        crumbSeparator = _ref2.crumbSeparator,
        crumbStyle = _ref2.crumbStyle,
        crumbActiveStyle = _ref2.crumbActiveStyle;
    // check to see if the path is already in the breadcrumb
    var indexOfFirstOccurrenceOfCurrentPath = crumbs.findIndex(function (crumb) {
      return crumb.pathname === location.pathname;
    }); // when path exists in breadcrumb we need to remove any crumbs after
    // that pathname

    if (indexOfFirstOccurrenceOfCurrentPath > -1 && indexOfFirstOccurrenceOfCurrentPath < crumbs.length - 1) {
      setCrumbs(crumbs.slice(0, indexOfFirstOccurrenceOfCurrentPath));
    } // when path does not exist we add it to the end of the breadcrumb


    if (indexOfFirstOccurrenceOfCurrentPath === -1) {
      setCrumbs([].concat(crumbs, [(0, _extends2.default)({}, location, {
        crumbLabel: crumbLabel,
        crumbSeparator: crumbSeparator,
        crumbStyle: crumbStyle,
        crumbActiveStyle: crumbActiveStyle
      })]));
    }
  };

  var crumb = {
    crumbs: crumbs,
    updateCrumbs: updateCrumbs
  };
  return _react.default.createElement(BreadcrumbContext.Provider, {
    value: crumb
  }, children);
};

exports.BreadcrumbProvider = BreadcrumbProvider;
var BreadcrumbConsumer = BreadcrumbContext.Consumer;
exports.BreadcrumbConsumer = BreadcrumbConsumer;
BreadcrumbProvider.defaultProps = {
  defaultCrumb: {}
};
BreadcrumbProvider.propTypes = {
  children: _propTypes.default.node.isRequired,
  defaultCrumb: _propTypes.default.shape({
    location: _propTypes.default.shape({
      pathname: _propTypes.default.string
    }),
    crumbLabel: _propTypes.default.string,
    crumbSeparator: _propTypes.default.string,
    crumbStyle: _propTypes.default.shape(),
    crumbActiveStyle: _propTypes.default.shape()
  })
};